{"version":3,"file":"index.js","sources":["../node_modules/paho-mqtt/paho-mqtt.js","../src/index.ts"],"sourcesContent":["/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n\n\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Paho module\n// only has a single public function, client, which returns\n// a Paho client object given connection details.\n\n/**\n * Send and receive messages using web browsers.\n * <p>\n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\n *\n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number.\n * <li>Specifying options that relate to the communications link with the server,\n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Paho.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Paho.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl>\n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n *\n * <code><pre>\nvar client = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  var message = new Paho.MQTT.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message);\n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect();\n};\n * </pre></code>\n * @namespace Paho\n */\n\n/* jshint shadow:true */\n(function ExportLibrary(root, factory) {\n\tif(typeof exports === \"object\" && typeof module === \"object\"){\n\t\tmodule.exports = factory();\n\t} else if (typeof define === \"function\" && define.amd){\n\t\tdefine(factory);\n\t} else if (typeof exports === \"object\"){\n\t\texports = factory();\n\t} else {\n\t\t//if (typeof root.Paho === \"undefined\"){\n\t\t//\troot.Paho = {};\n\t\t//}\n\t\troot.Paho = factory();\n\t}\n})(this, function LibraryFactory(){\n\n\n\tvar PahoMQTT = (function (global) {\n\n\t// Private variables below, these are only visible inside the function closure\n\t// which is used to define the module.\n\tvar version = \"@VERSION@-@BUILDLEVEL@\";\n\n\t/**\n\t * @private\n\t */\n\tvar localStorage = global.localStorage || (function () {\n\t\tvar data = {};\n\n\t\treturn {\n\t\t\tsetItem: function (key, item) { data[key] = item; },\n\t\t\tgetItem: function (key) { return data[key]; },\n\t\t\tremoveItem: function (key) { delete data[key]; },\n\t\t};\n\t})();\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar MESSAGE_TYPE = {\n\t\t\tCONNECT: 1,\n\t\t\tCONNACK: 2,\n\t\t\tPUBLISH: 3,\n\t\t\tPUBACK: 4,\n\t\t\tPUBREC: 5,\n\t\t\tPUBREL: 6,\n\t\t\tPUBCOMP: 7,\n\t\t\tSUBSCRIBE: 8,\n\t\t\tSUBACK: 9,\n\t\t\tUNSUBSCRIBE: 10,\n\t\t\tUNSUBACK: 11,\n\t\t\tPINGREQ: 12,\n\t\t\tPINGRESP: 13,\n\t\t\tDISCONNECT: 14\n\t\t};\n\n\t\t// Collection of utility methods used to simplify module code\n\t\t// and promote the DRY pattern.\n\n\t\t/**\n\t * Validate an object's parameter names to ensure they\n\t * match a list of expected variables name for this option\n\t * type. Used to ensure option object passed into the API don't\n\t * contain erroneous parameters.\n\t * @param {Object} obj - User options object\n\t * @param {Object} keys - valid keys and types that may exist in obj.\n\t * @throws {Error} Invalid option parameter found.\n\t * @private\n\t */\n\t\tvar validate = function(obj, keys) {\n\t\t\tfor (var key in obj) {\n\t\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t\tif (keys.hasOwnProperty(key)) {\n\t\t\t\t\t\tif (typeof obj[key] !== keys[key])\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\t\t\t\t\t\tfor (var validKey in keys)\n\t\t\t\t\t\t\tif (keys.hasOwnProperty(validKey))\n\t\t\t\t\t\t\t\terrorStr = errorStr+\" \"+validKey;\n\t\t\t\t\t\tthrow new Error(errorStr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Return a new function which runs the user function bound\n\t * to a fixed scope.\n\t * @param {function} User function\n\t * @param {object} Function scope\n\t * @return {function} User function bound to another scope\n\t * @private\n\t */\n\t\tvar scope = function (f, scope) {\n\t\t\treturn function () {\n\t\t\t\treturn f.apply(scope, arguments);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar ERROR = {\n\t\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\n\t\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\n\t\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"},\n\t\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\n\t\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\n\t\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"},\n\t\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\n\t\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\n\t\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\n\t\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\n\t\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\n\t\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\n\t\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\n\t\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\n\t\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\n\t\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\n\t\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\n\t\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"},\n\t\t\tBUFFER_FULL: {code:18, text:\"AMQJS0018E Message buffer is full, maximum buffer size: {0}.\"},\n\t\t};\n\n\t\t/** CONNACK RC Meaning. */\n\t\tvar CONNACK_RC = {\n\t\t\t0:\"Connection Accepted\",\n\t\t\t1:\"Connection Refused: unacceptable protocol version\",\n\t\t\t2:\"Connection Refused: identifier rejected\",\n\t\t\t3:\"Connection Refused: server unavailable\",\n\t\t\t4:\"Connection Refused: bad user name or password\",\n\t\t\t5:\"Connection Refused: not authorized\"\n\t\t};\n\n\t/**\n\t * Format an error message text.\n\t * @private\n\t * @param {error} ERROR value above.\n\t * @param {substitutions} [array] substituted into the text.\n\t * @return the text with the substitutions made.\n\t */\n\t\tvar format = function(error, substitutions) {\n\t\t\tvar text = error.text;\n\t\t\tif (substitutions) {\n\t\t\t\tvar field,start;\n\t\t\t\tfor (var i=0; i<substitutions.length; i++) {\n\t\t\t\t\tfield = \"{\"+i+\"}\";\n\t\t\t\t\tstart = text.indexOf(field);\n\t\t\t\t\tif(start > 0) {\n\t\t\t\t\t\tvar part1 = text.substring(0,start);\n\t\t\t\t\t\tvar part2 = text.substring(start+field.length);\n\t\t\t\t\t\ttext = part1+substitutions[i]+part2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\t//MQTT protocol and version          6    M    Q    I    s    d    p    3\n\t\tvar MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\n\t\t//MQTT proto/version for 311         4    M    Q    T    T    4\n\t\tvar MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];\n\n\t\t/**\n\t * Construct an MQTT wire protocol message.\n\t * @param type MQTT packet type.\n\t * @param options optional wire message attributes.\n\t *\n\t * Optional properties\n\t *\n\t * messageIdentifier: message ID in the range [0..65535]\n\t * payloadMessage:\tApplication Message - PUBLISH only\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n\t * requestQoS:\t\tarray of QoS values [0..2]\n\t *\n\t * \"Flag\" properties\n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\n\t * password:\t\ttrue if present / false if absent (CONNECT)\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n\t *\n\t * @private\n\t * @ignore\n\t */\n\t\tvar WireMessage = function (type, options) {\n\t\t\tthis.type = type;\n\t\t\tfor (var name in options) {\n\t\t\t\tif (options.hasOwnProperty(name)) {\n\t\t\t\t\tthis[name] = options[name];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tWireMessage.prototype.encode = function() {\n\t\t// Compute the first byte of the fixed header\n\t\t\tvar first = ((this.type & 0x0f) << 4);\n\n\t\t\t/*\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\n\t\t * of all the component parts\n\t\t */\n\n\t\t\tvar remLength = 0;\n\t\t\tvar topicStrLength = [];\n\t\t\tvar destinationNameLength = 0;\n\t\t\tvar willMessagePayloadBytes;\n\n\t\t\t// if the message contains a messageIdentifier then we need two bytes for that\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tremLength += 2;\n\n\t\t\tswitch(this.type) {\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tswitch(this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tremLength += MqttProtoIdentifierv3.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tremLength += MqttProtoIdentifierv4.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\n\t\t\t\t\twillMessagePayloadBytes = this.willMessage.payloadBytes;\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\n\t\t\t\tbreak;\n\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\n\t\t\t\t// QoS on Subscribe only\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n\t\t\t\tremLength += destinationNameLength + 2;\n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\n\t\t\t\tremLength += payloadBytes.byteLength;\n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now we can allocate a buffer for the message\n\n\t\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\n\t\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\n\t\t\tvar buffer = new ArrayBuffer(remLength + pos);\n\t\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\n\n\t\t\t//Write the fixed header into the buffer\n\t\t\tbyteStream[0] = first;\n\t\t\tbyteStream.set(mbi,1);\n\n\t\t\t// If this is a PUBLISH then the variable header starts with a topic\n\t\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\n\t\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n\t\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n\n\t\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\n\t\t\t\tswitch (this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv3, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv3.length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv4, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv4.length;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar connectFlags = 0;\n\t\t\t\tif (this.cleanSession)\n\t\t\t\t\tconnectFlags = 0x02;\n\t\t\t\tif (this.willMessage !== undefined ) {\n\t\t\t\t\tconnectFlags |= 0x04;\n\t\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\n\t\t\t\t\tif (this.willMessage.retained) {\n\t\t\t\t\t\tconnectFlags |= 0x20;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tconnectFlags |= 0x80;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tconnectFlags |= 0x40;\n\t\t\t\tbyteStream[pos++] = connectFlags;\n\t\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\n\t\t\t}\n\n\t\t\t// Output the messageIdentifier - if there is one\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\n\n\t\t\tswitch(this.type) {\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos);\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\n\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\n\t\t\t\tbyteStream.set(payloadBytes, pos);\n\n\t\t\t\tbreak;\n\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREC:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREL:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t//    \t    \tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing.\n\t\t\t}\n\n\t\t\treturn buffer;\n\t\t};\n\n\t\tfunction decodeMessage(input,pos) {\n\t\t\tvar startingPos = pos;\n\t\t\tvar first = input[pos];\n\t\t\tvar type = first >> 4;\n\t\t\tvar messageInfo = first &= 0x0f;\n\t\t\tpos += 1;\n\n\n\t\t\t// Decode the remaining length (MBI format)\n\n\t\t\tvar digit;\n\t\t\tvar remLength = 0;\n\t\t\tvar multiplier = 1;\n\t\t\tdo {\n\t\t\t\tif (pos == input.length) {\n\t\t\t\t\treturn [null,startingPos];\n\t\t\t\t}\n\t\t\t\tdigit = input[pos++];\n\t\t\t\tremLength += ((digit & 0x7F) * multiplier);\n\t\t\t\tmultiplier *= 128;\n\t\t\t} while ((digit & 0x80) !== 0);\n\n\t\t\tvar endPos = pos+remLength;\n\t\t\tif (endPos > input.length) {\n\t\t\t\treturn [null,startingPos];\n\t\t\t}\n\n\t\t\tvar wireMessage = new WireMessage(type);\n\t\t\tswitch(type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tvar connectAcknowledgeFlags = input[pos++];\n\t\t\t\tif (connectAcknowledgeFlags & 0x01)\n\t\t\t\t\twireMessage.sessionPresent = true;\n\t\t\t\twireMessage.returnCode = input[pos++];\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\n\n\t\t\t\tvar len = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\n\t\t\t\tpos += len;\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\n\t\t\t\tif (qos > 0) {\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\t\tpos += 2;\n\t\t\t\t}\n\n\t\t\t\tvar message = new Message(input.subarray(pos, endPos));\n\t\t\t\tif ((messageInfo & 0x01) == 0x01)\n\t\t\t\t\tmessage.retained = true;\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\n\t\t\t\t\tmessage.duplicate =  true;\n\t\t\t\tmessage.qos = qos;\n\t\t\t\tmessage.destinationName = topicName;\n\t\t\t\twireMessage.payloadMessage = message;\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\n\t\t\tcase  MESSAGE_TYPE.PUBREL:\n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\twireMessage.returnCode = input.subarray(pos, endPos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn [wireMessage,endPos];\n\t\t}\n\n\t\tfunction writeUint16(input, buffer, offset) {\n\t\t\tbuffer[offset++] = input >> 8;      //MSB\n\t\t\tbuffer[offset++] = input % 256;     //LSB\n\t\t\treturn offset;\n\t\t}\n\n\t\tfunction writeString(input, utf8Length, buffer, offset) {\n\t\t\toffset = writeUint16(utf8Length, buffer, offset);\n\t\t\tstringToUTF8(input, buffer, offset);\n\t\t\treturn offset + utf8Length;\n\t\t}\n\n\t\tfunction readUint16(buffer, offset) {\n\t\t\treturn 256*buffer[offset] + buffer[offset+1];\n\t\t}\n\n\t\t/**\n\t * Encodes an MQTT Multi-Byte Integer\n\t * @private\n\t */\n\t\tfunction encodeMBI(number) {\n\t\t\tvar output = new Array(1);\n\t\t\tvar numBytes = 0;\n\n\t\t\tdo {\n\t\t\t\tvar digit = number % 128;\n\t\t\t\tnumber = number >> 7;\n\t\t\t\tif (number > 0) {\n\t\t\t\t\tdigit |= 0x80;\n\t\t\t\t}\n\t\t\t\toutput[numBytes++] = digit;\n\t\t\t} while ( (number > 0) && (numBytes<4) );\n\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\n\t * @private\n\t */\n\t\tfunction UTF8Length(input) {\n\t\t\tvar output = 0;\n\t\t\tfor (var i = 0; i<input.length; i++)\n\t\t\t{\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\tif (charCode > 0x7FF)\n\t\t\t\t{\n\t\t\t\t\t// Surrogate pair means its a 4 byte character\n\t\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)\n\t\t\t\t\t{\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\toutput++;\n\t\t\t\t\t}\n\t\t\t\t\toutput +=3;\n\t\t\t\t}\n\t\t\t\telse if (charCode > 0x7F)\n\t\t\t\t\toutput +=2;\n\t\t\t\telse\n\t\t\t\t\toutput++;\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\n\t * @private\n\t */\n\t\tfunction stringToUTF8(input, output, start) {\n\t\t\tvar pos = start;\n\t\t\tfor (var i = 0; i<input.length; i++) {\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\n\t\t\t\t// Check for a surrogate pair.\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\n\t\t\t\t\tvar lowCharCode = input.charCodeAt(++i);\n\t\t\t\t\tif (isNaN(lowCharCode)) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n\t\t\t\t\t}\n\t\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\n\n\t\t\t\t}\n\n\t\t\t\tif (charCode <= 0x7F) {\n\t\t\t\t\toutput[pos++] = charCode;\n\t\t\t\t} else if (charCode <= 0x7FF) {\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else if (charCode <= 0xFFFF) {\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else {\n\t\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\tfunction parseUTF8(input, offset, length) {\n\t\t\tvar output = \"\";\n\t\t\tvar utf16;\n\t\t\tvar pos = offset;\n\n\t\t\twhile (pos < offset+length)\n\t\t\t{\n\t\t\t\tvar byte1 = input[pos++];\n\t\t\t\tif (byte1 < 128)\n\t\t\t\t\tutf16 = byte1;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar byte2 = input[pos++]-128;\n\t\t\t\t\tif (byte2 < 0)\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\n\t\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\n\t\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar byte3 = input[pos++]-128;\n\t\t\t\t\t\tif (byte3 < 0)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n\t\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\n\t\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar byte4 = input[pos++]-128;\n\t\t\t\t\t\t\tif (byte4 < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\tif (byte1 < 0xF8)        // 4 byte character\n\t\t\t\t\t\t\t\tutf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\n\t\t\t\t\t\t\telse                     // longer encodings are not supported\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n\t\t\t\t{\n\t\t\t\t\tutf16 -= 0x10000;\n\t\t\t\t\toutput += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\t\t\t\t\tutf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n\t\t\t\t}\n\t\t\t\toutput += String.fromCharCode(utf16);\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Repeat keepalive requests, monitor responses.\n\t * @ignore\n\t */\n\t\tvar Pinger = function(client, keepAliveInterval) {\n\t\t\tthis._client = client;\n\t\t\tthis._keepAliveInterval = keepAliveInterval*1000;\n\t\t\tthis.isReset = false;\n\n\t\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();\n\n\t\t\tvar doTimeout = function (pinger) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn doPing.apply(pinger);\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t/** @ignore */\n\t\t\tvar doPing = function() {\n\t\t\t\tif (!this.isReset) {\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\n\t\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\n\t\t\t\t} else {\n\t\t\t\t\tthis.isReset = false;\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\t\t\t\t\tthis._client.socket.send(pingReq);\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.reset = function() {\n\t\t\t\tthis.isReset = true;\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tif (this._keepAliveInterval > 0)\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t};\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Monitor request completion.\n\t * @ignore\n\t */\n\t\tvar Timeout = function(client, timeoutSeconds, action, args) {\n\t\t\tif (!timeoutSeconds)\n\t\t\t\ttimeoutSeconds = 30;\n\n\t\t\tvar doTimeout = function (action, client, args) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn action.apply(client, args);\n\t\t\t\t};\n\t\t\t};\n\t\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t/**\n\t * Internal implementation of the Websockets MQTT V3.1 client.\n\t *\n\t * @name Paho.ClientImpl @constructor\n\t * @param {String} host the DNS nameof the webSocket host.\n\t * @param {Number} port the port number for that host.\n\t * @param {String} clientId the MQ client identifier.\n\t */\n\t\tvar ClientImpl = function (uri, host, port, path, clientId) {\n\t\t// Check dependencies are satisfied in this browser.\n\t\t\tif (!(\"WebSocket\" in global && global.WebSocket !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n\t\t\t}\n\t\t\tif (!(\"ArrayBuffer\" in global && global.ArrayBuffer !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n\t\t\t}\n\t\t\tthis._trace(\"Paho.Client\", uri, host, port, path, clientId);\n\n\t\t\tthis.host = host;\n\t\t\tthis.port = port;\n\t\t\tthis.path = path;\n\t\t\tthis.uri = uri;\n\t\t\tthis.clientId = clientId;\n\t\t\tthis._wsuri = null;\n\n\t\t\t// Local storagekeys are qualified with the following string.\n\t\t\t// The conditional inclusion of path in the key is for backward\n\t\t\t// compatibility to when the path was not configurable and assumed to\n\t\t\t// be /mqtt\n\t\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\n\n\t\t\t// Create private instance-only message queue\n\t\t\t// Internal queue of messages to be sent, in sending order.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\n\t\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids.\n\t\t\tthis._sentMessages = {};\n\n\t\t\t// Messages we have received and acknowleged and are expecting a confirm message for\n\t\t\t// indexed by their respective message ids.\n\t\t\tthis._receivedMessages = {};\n\n\t\t\t// Internal list of callbacks to be executed when messages\n\t\t\t// have been successfully sent over web socket, e.g. disconnect\n\t\t\t// when it doesn't have to wait for ACK, just message is dispatched.\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\t// Unique identifier for SEND messages, incrementing\n\t\t\t// counter as messages are sent.\n\t\t\tthis._message_identifier = 1;\n\n\t\t\t// Used to determine the transmission sequence of stored sent messages.\n\t\t\tthis._sequence = 0;\n\n\n\t\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.\n\t\t\tfor (var key in localStorage)\n\t\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) === 0 || key.indexOf(\"Received:\"+this._localKey) === 0)\n\t\t\t\t\tthis.restore(key);\n\t\t};\n\n\t\t// Messaging Client public instance members.\n\t\tClientImpl.prototype.host = null;\n\t\tClientImpl.prototype.port = null;\n\t\tClientImpl.prototype.path = null;\n\t\tClientImpl.prototype.uri = null;\n\t\tClientImpl.prototype.clientId = null;\n\n\t\t// Messaging Client private instance members.\n\t\tClientImpl.prototype.socket = null;\n\t\t/* true once we have received an acknowledgement to a CONNECT packet. */\n\t\tClientImpl.prototype.connected = false;\n\t\t/* The largest message identifier allowed, may not be larger than 2**16 but\n\t\t * if set smaller reduces the maximum number of outbound messages allowed.\n\t\t */\n\t\tClientImpl.prototype.maxMessageIdentifier = 65536;\n\t\tClientImpl.prototype.connectOptions = null;\n\t\tClientImpl.prototype.hostIndex = null;\n\t\tClientImpl.prototype.onConnected = null;\n\t\tClientImpl.prototype.onConnectionLost = null;\n\t\tClientImpl.prototype.onMessageDelivered = null;\n\t\tClientImpl.prototype.onMessageArrived = null;\n\t\tClientImpl.prototype.traceFunction = null;\n\t\tClientImpl.prototype._msg_queue = null;\n\t\tClientImpl.prototype._buffered_msg_queue = null;\n\t\tClientImpl.prototype._connectTimeout = null;\n\t\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\t\tClientImpl.prototype.sendPinger = null;\n\t\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\t\tClientImpl.prototype.receivePinger = null;\n\t\tClientImpl.prototype._reconnectInterval = 1; // Reconnect Delay, starts at 1 second\n\t\tClientImpl.prototype._reconnecting = false;\n\t\tClientImpl.prototype._reconnectTimeout = null;\n\t\tClientImpl.prototype.disconnectedPublishing = false;\n\t\tClientImpl.prototype.disconnectedBufferSize = 5000;\n\n\t\tClientImpl.prototype.receiveBuffer = null;\n\n\t\tClientImpl.prototype._traceBuffer = null;\n\t\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n\t\tClientImpl.prototype.connect = function (connectOptions) {\n\t\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\");\n\t\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\n\t\t\tif (this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\t\tif (this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// connect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process to use new connect options.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tthis.connectOptions = connectOptions;\n\t\t\tthis._reconnectInterval = 1;\n\t\t\tthis._reconnecting = false;\n\t\t\tif (connectOptions.uris) {\n\t\t\t\tthis.hostIndex = 0;\n\t\t\t\tthis._doConnect(connectOptions.uris[0]);\n\t\t\t} else {\n\t\t\t\tthis._doConnect(this.uri);\n\t\t\t}\n\n\t\t};\n\n\t\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n\t\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n            if (subscribeOptions.qos === undefined)\n                subscribeOptions.qos = 0;\n            wireMessage.requestedQos = [];\n            for (var i = 0; i < wireMessage.topics.length; i++)\n                wireMessage.requestedQos[i] = subscribeOptions.qos;\n\n\t\t\tif (subscribeOptions.onSuccess) {\n\t\t\t\twireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.onFailure) {\n\t\t\t\twireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode, errorMessage:format(errorCode)});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, subscribeOptions.timeout, subscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:subscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All subscriptions return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {\n\t\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n\n\t\t\tif (unsubscribeOptions.onSuccess) {\n\t\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\n\t\t\t}\n\t\t\tif (unsubscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, unsubscribeOptions.timeout, unsubscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:unsubscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All unsubscribes return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.send = function (message) {\n\t\t\tthis._trace(\"Client.send\", message);\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n\t\t\twireMessage.payloadMessage = message;\n\n\t\t\tif (this.connected) {\n\t\t\t// Mark qos 1 & 2 message as \"ACK required\"\n\t\t\t// For qos 0 message, invoke onMessageDelivered callback if there is one.\n\t\t\t// Then schedule the message.\n\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t} else if (this.onMessageDelivered) {\n\t\t\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n\t\t\t\t}\n\t\t\t\tthis._schedule_message(wireMessage);\n\t\t\t} else {\n\t\t\t// Currently disconnected, will not schedule this message\n\t\t\t// Check if reconnecting is in progress and disconnected publish is enabled.\n\t\t\t\tif (this._reconnecting && this.disconnectedPublishing) {\n\t\t\t\t// Check the limit which include the \"required ACK\" messages\n\t\t\t\t\tvar messageCount = Object.keys(this._sentMessages).length + this._buffered_msg_queue.length;\n\t\t\t\t\tif (messageCount > this.disconnectedBufferSize) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.BUFFER_FULL, [this.disconnectedBufferSize]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\t\t// Mark this message as \"ACK required\"\n\t\t\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\t\t\t\t\tthis._buffered_msg_queue.unshift(wireMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.disconnect = function () {\n\t\t\tthis._trace(\"Client.disconnect\");\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// disconnect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tif (!this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n\t\t\t// Run the disconnected call back as soon as the message has been sent,\n\t\t\t// in case of a failure later on in the disconnect processing.\n\t\t\t// as a consequence, the _disconected call back may be run several times.\n\t\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.getTraceLog = function () {\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\n\t\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\t\t\t\tfor (var key in this._sentMessages)\n\t\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\n\t\t\t\tfor (var key in this._receivedMessages)\n\t\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\n\n\t\t\t\treturn this._traceBuffer;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.startTrace = function () {\n\t\t\tif ( this._traceBuffer === null ) {\n\t\t\t\tthis._traceBuffer = [];\n\t\t\t}\n\t\t\tthis._trace(\"Client.startTrace\", new Date(), version);\n\t\t};\n\n\t\tClientImpl.prototype.stopTrace = function () {\n\t\t\tdelete this._traceBuffer;\n\t\t};\n\n\t\tClientImpl.prototype._doConnect = function (wsurl) {\n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters.\n\t\t\tif (this.connectOptions.useSSL) {\n\t\t\t\tvar uriParts = wsurl.split(\":\");\n\t\t\t\turiParts[0] = \"wss\";\n\t\t\t\twsurl = uriParts.join(\":\");\n\t\t\t}\n\t\t\tthis._wsuri = wsurl;\n\t\t\tthis.connected = false;\n\n\n\n\t\t\tif (this.connectOptions.mqttVersion < 4) {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n\t\t\t} else {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqtt\"]);\n\t\t\t}\n\t\t\tthis.socket.binaryType = \"arraybuffer\";\n\t\t\tthis.socket.onopen = scope(this._on_socket_open, this);\n\t\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\n\t\t\tthis.socket.onerror = scope(this._on_socket_error, this);\n\t\t\tthis.socket.onclose = scope(this._on_socket_close, this);\n\n\t\t\tthis.sendPinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tthis.receivePinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\t\t\tthis._connectTimeout = new Timeout(this, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n\t\t};\n\n\n\t\t// Schedule a new message to be sent over the WebSockets\n\t\t// connection. CONNECT messages cause WebSocket connection\n\t\t// to be started. All other messages are queued internally\n\t\t// until this has happened. When WS connection starts, process\n\t\t// all outstanding messages.\n\t\tClientImpl.prototype._schedule_message = function (message) {\n\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\tthis._msg_queue.unshift(message);\n\t\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK.\n\t\t\tif (this.connected) {\n\t\t\t\tthis._process_queue();\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.store = function(prefix, wireMessage) {\n\t\t\tvar storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\n\n\t\t\tswitch(wireMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif(wireMessage.pubRecReceived)\n\t\t\t\t\tstoredMessage.pubRecReceived = true;\n\n\t\t\t\t// Convert the payload to a hex string.\n\t\t\t\tstoredMessage.payloadMessage = {};\n\t\t\t\tvar hex = \"\";\n\t\t\t\tvar messageBytes = wireMessage.payloadMessage.payloadBytes;\n\t\t\t\tfor (var i=0; i<messageBytes.length; i++) {\n\t\t\t\t\tif (messageBytes[i] <= 0xF)\n\t\t\t\t\t\thex = hex+\"0\"+messageBytes[i].toString(16);\n\t\t\t\t\telse\n\t\t\t\t\t\thex = hex+messageBytes[i].toString(16);\n\t\t\t\t}\n\t\t\t\tstoredMessage.payloadMessage.payloadHex = hex;\n\n\t\t\t\tstoredMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n\t\t\t\tstoredMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n\t\t\t\tif (wireMessage.payloadMessage.duplicate)\n\t\t\t\t\tstoredMessage.payloadMessage.duplicate = true;\n\t\t\t\tif (wireMessage.payloadMessage.retained)\n\t\t\t\t\tstoredMessage.payloadMessage.retained = true;\n\n\t\t\t\t// Add a sequence number to sent messages.\n\t\t\t\tif ( prefix.indexOf(\"Sent:\") === 0 ) {\n\t\t\t\t\tif ( wireMessage.sequence === undefined )\n\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\tstoredMessage.sequence = wireMessage.sequence;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [prefix+this._localKey+wireMessage.messageIdentifier, storedMessage]));\n\t\t\t}\n\t\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n\t\t};\n\n\t\tClientImpl.prototype.restore = function(key) {\n\t\t\tvar value = localStorage.getItem(key);\n\t\t\tvar storedMessage = JSON.parse(value);\n\n\t\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\n\t\t\tswitch(storedMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// Replace the payload message with a Message object.\n\t\t\t\tvar hex = storedMessage.payloadMessage.payloadHex;\n\t\t\t\tvar buffer = new ArrayBuffer((hex.length)/2);\n\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\tvar i = 0;\n\t\t\t\twhile (hex.length >= 2) {\n\t\t\t\t\tvar x = parseInt(hex.substring(0, 2), 16);\n\t\t\t\t\thex = hex.substring(2, hex.length);\n\t\t\t\t\tbyteStream[i++] = x;\n\t\t\t\t}\n\t\t\t\tvar payloadMessage = new Message(byteStream);\n\n\t\t\t\tpayloadMessage.qos = storedMessage.payloadMessage.qos;\n\t\t\t\tpayloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n\t\t\t\tif (storedMessage.payloadMessage.duplicate)\n\t\t\t\t\tpayloadMessage.duplicate = true;\n\t\t\t\tif (storedMessage.payloadMessage.retained)\n\t\t\t\t\tpayloadMessage.retained = true;\n\t\t\t\twireMessage.payloadMessage = payloadMessage;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n\t\t\t}\n\n\t\t\tif (key.indexOf(\"Sent:\"+this._localKey) === 0) {\n\t\t\t\twireMessage.payloadMessage.duplicate = true;\n\t\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t} else if (key.indexOf(\"Received:\"+this._localKey) === 0) {\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._process_queue = function () {\n\t\t\tvar message = null;\n\n\t\t\t// Send all queued messages down socket connection\n\t\t\twhile ((message = this._msg_queue.pop())) {\n\t\t\t\tthis._socket_send(message);\n\t\t\t\t// Notify listeners that message was successfully sent\n\t\t\t\tif (this._notify_msg_sent[message]) {\n\t\t\t\t\tthis._notify_msg_sent[message]();\n\t\t\t\t\tdelete this._notify_msg_sent[message];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Expect an ACK response for this message. Add message to the set of in progress\n\t * messages and set an unused identifier in this message.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._requires_ack = function (wireMessage) {\n\t\t\tvar messageCount = Object.keys(this._sentMessages).length;\n\t\t\tif (messageCount > this.maxMessageIdentifier)\n\t\t\t\tthrow Error (\"Too many messages:\"+messageCount);\n\n\t\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\n\t\t\t\tthis._message_identifier++;\n\t\t\t}\n\t\t\twireMessage.messageIdentifier = this._message_identifier;\n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n\t\t\t\tthis.store(\"Sent:\", wireMessage);\n\t\t\t}\n\t\t\tif (this._message_identifier === this.maxMessageIdentifier) {\n\t\t\t\tthis._message_identifier = 1;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has been opened.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_open = function () {\n\t\t// Create the CONNECT message object.\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions);\n\t\t\twireMessage.clientId = this.clientId;\n\t\t\tthis._socket_send(wireMessage);\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has received a complete packet.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_message = function (event) {\n\t\t\tthis._trace(\"Client._on_socket_message\", event.data);\n\t\t\tvar messages = this._deframeMessages(event.data);\n\t\t\tfor (var i = 0; i < messages.length; i+=1) {\n\t\t\t\tthis._handleMessage(messages[i]);\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._deframeMessages = function(data) {\n\t\t\tvar byteArray = new Uint8Array(data);\n\t\t\tvar messages = [];\n\t\t\tif (this.receiveBuffer) {\n\t\t\t\tvar newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\n\t\t\t\tnewData.set(this.receiveBuffer);\n\t\t\t\tnewData.set(byteArray,this.receiveBuffer.length);\n\t\t\t\tbyteArray = newData;\n\t\t\t\tdelete this.receiveBuffer;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tvar offset = 0;\n\t\t\t\twhile(offset < byteArray.length) {\n\t\t\t\t\tvar result = decodeMessage(byteArray,offset);\n\t\t\t\t\tvar wireMessage = result[0];\n\t\t\t\t\toffset = result[1];\n\t\t\t\t\tif (wireMessage !== null) {\n\t\t\t\t\t\tmessages.push(wireMessage);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (offset < byteArray.length) {\n\t\t\t\t\tthis.receiveBuffer = byteArray.subarray(offset);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn messages;\n\t\t};\n\n\t\tClientImpl.prototype._handleMessage = function(wireMessage) {\n\n\t\t\tthis._trace(\"Client._handleMessage\", wireMessage);\n\n\t\t\ttry {\n\t\t\t\tswitch(wireMessage.type) {\n\t\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\t\tif (this._reconnectTimeout)\n\t\t\t\t\t\tthis._reconnectTimeout.cancel();\n\n\t\t\t\t\t// If we have started using clean session then clear up the local state.\n\t\t\t\t\tif (this.connectOptions.cleanSession) {\n\t\t\t\t\t\tfor (var key in this._sentMessages) {\n\t\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._sentMessages = {};\n\n\t\t\t\t\t\tfor (var key in this._receivedMessages) {\n\t\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._receivedMessages = {};\n\t\t\t\t\t}\n\t\t\t\t\t// Client connected and ready for business.\n\t\t\t\t\tif (wireMessage.returnCode === 0) {\n\n\t\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\n\n\t\t\t\t\t\tif (this.connectOptions.uris)\n\t\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Resend messages.\n\t\t\t\t\tvar sequencedMessages = [];\n\t\t\t\t\tfor (var msgId in this._sentMessages) {\n\t\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\n\t\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Also schedule qos 0 buffered messages if any\n\t\t\t\t\tif (this._buffered_msg_queue.length > 0) {\n\t\t\t\t\t\tvar msg = null;\n\t\t\t\t\t\twhile ((msg = this._buffered_msg_queue.pop())) {\n\t\t\t\t\t\t\tsequencedMessages.push(msg);\n\t\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\t\tthis._notify_msg_sent[msg] = this.onMessageDelivered(msg.payloadMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Sort sentMessages into the original sent order.\n\t\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\n\t\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\n\t\t\t\t\t\tvar sentMessage = sequencedMessages[i];\n\t\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n\t\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\n\t\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._schedule_message(sentMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\n\t\t\t\t\t// Will also now return if this connection was the result of an automatic\n\t\t\t\t\t// reconnect and which URI was successfully connected to.\n\t\t\t\t\tif (this.connectOptions.onSuccess) {\n\t\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\n\t\t\t\t\t}\n\n\t\t\t\t\tvar reconnected = false;\n\t\t\t\t\tif (this._reconnecting) {\n\t\t\t\t\t\treconnected = true;\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnecting = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the onConnected callback if there is one.\n\t\t\t\t\tthis._connected(reconnected, this._wsuri);\n\n\t\t\t\t\t// Process all queued messages now that the connection is established.\n\t\t\t\t\tthis._process_queue();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t\tthis._receivePublish(wireMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREC:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tsentMessage.pubRecReceived = true;\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (receivedMessage) {\n\t\t\t\t\t\tthis._receiveMessage(receivedMessage);\n\t\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\t\t\t\t\tvar pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\tthis._schedule_message(pubCompMessage);\n\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.SUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif(sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\t// This will need to be fixed when we add multiple topic support\n\t\t\t\t\t\tif (wireMessage.returnCode[0] === 0x80) {\n\t\t\t\t\t\t\tif (sentMessage.onFailure) {\n\t\t\t\t\t\t\t\tsentMessage.onFailure(wireMessage.returnCode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (sentMessage.onSuccess) {\n\t\t\t\t\t\t\tsentMessage.onSuccess(wireMessage.returnCode);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.UNSUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif (sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PINGRESP:\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n\t\t\t\t\tthis.sendPinger.reset();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\t// Clients do not expect to receive disconnect packets.\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_error = function (error) {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_close = function () {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._socket_send = function (wireMessage) {\n\n\t\t\tif (wireMessage.type == 1) {\n\t\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\");\n\t\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\n\t\t\t}\n\t\t\telse this._trace(\"Client._socket_send\", wireMessage);\n\n\t\t\tthis.socket.send(wireMessage.encode());\n\t\t\t/* We have proved to the server we are alive. */\n\t\t\tthis.sendPinger.reset();\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receivePublish = function (wireMessage) {\n\t\t\tswitch(wireMessage.payloadMessage.qos) {\n\t\t\tcase \"undefined\":\n\t\t\tcase 0:\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubAckMessage);\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t\tthis.store(\"Received:\", wireMessage);\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubRecMessage);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"Invaild qos=\" + wireMessage.payloadMessage.qos);\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receiveMessage = function (wireMessage) {\n\t\t\tif (this.onMessageArrived) {\n\t\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has connected.\n\t * @param {reconnect} [boolean] indicate if this was a result of reconnect operation.\n\t * @param {uri} [string] fully qualified WebSocket URI of the server.\n\t */\n\t\tClientImpl.prototype._connected = function (reconnect, uri) {\n\t\t// Execute the onConnected callback if there is one.\n\t\t\tif (this.onConnected)\n\t\t\t\tthis.onConnected(reconnect, uri);\n\t\t};\n\n\t\t/**\n\t * Attempts to reconnect the client to the server.\n   * For each reconnect attempt, will double the reconnect interval\n   * up to 128 seconds.\n\t */\n\t\tClientImpl.prototype._reconnect = function () {\n\t\t\tthis._trace(\"Client._reconnect\");\n\t\t\tif (!this.connected) {\n\t\t\t\tthis._reconnecting = true;\n\t\t\t\tthis.sendPinger.cancel();\n\t\t\t\tthis.receivePinger.cancel();\n\t\t\t\tif (this._reconnectInterval < 128)\n\t\t\t\t\tthis._reconnectInterval = this._reconnectInterval * 2;\n\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t} else {\n\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has disconnected either at its own request or because the server\n\t * or network disconnected it. Remove all non-durable state.\n\t * @param {errorCode} [number] the error number.\n\t * @param {errorText} [string] the error text.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\n\t\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\n\n\t\t\tif (errorCode !== undefined && this._reconnecting) {\n\t\t\t\t//Continue automatic reconnect process\n\t\t\t\tthis._reconnectTimeout = new Timeout(this, this._reconnectInterval, this._reconnect);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.sendPinger.cancel();\n\t\t\tthis.receivePinger.cancel();\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\n\t\t\t// Clear message buffers.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\tif (this.socket) {\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\n\t\t\t\tthis.socket.onopen = null;\n\t\t\t\tthis.socket.onmessage = null;\n\t\t\t\tthis.socket.onerror = null;\n\t\t\t\tthis.socket.onclose = null;\n\t\t\t\tif (this.socket.readyState === 1)\n\t\t\t\t\tthis.socket.close();\n\t\t\t\tdelete this.socket;\n\t\t\t}\n\n\t\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\n\t\t\t// Try the next host.\n\t\t\t\tthis.hostIndex++;\n\t\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\n\t\t\t} else {\n\n\t\t\t\tif (errorCode === undefined) {\n\t\t\t\t\terrorCode = ERROR.OK.code;\n\t\t\t\t\terrorText = format(ERROR.OK);\n\t\t\t\t}\n\n\t\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.connected = false;\n\t\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.\n\t\t\t\t\tif (this.onConnectionLost) {\n\t\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText, reconnect:this.connectOptions.reconnect, uri:this._wsuri});\n\t\t\t\t\t}\n\t\t\t\t\tif (errorCode !== ERROR.OK.code && this.connectOptions.reconnect) {\n\t\t\t\t\t// Start automatic reconnect process for the very first time since last successful connect.\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnect();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\n\t\t\t\t\tif (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n\t\t\t\t\t\tthis._trace(\"Failed to connect V4, dropping back to V3\");\n\t\t\t\t\t\tthis.connectOptions.mqttVersion = 3;\n\t\t\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if(this.connectOptions.onFailure) {\n\t\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._trace = function () {\n\t\t// Pass trace message back to client's callback function\n\t\t\tif (this.traceFunction) {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\tfor (var i in args)\n\t\t\t\t{\n\t\t\t\t\tif (typeof args[i] !== \"undefined\")\n\t\t\t\t\t\targs.splice(i, 1, JSON.stringify(args[i]));\n\t\t\t\t}\n\t\t\t\tvar record = args.join(\"\");\n\t\t\t\tthis.traceFunction ({severity: \"Debug\", message: record\t});\n\t\t\t}\n\n\t\t\t//buffer style trace\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\n\t\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {\n\t\t\t\t\t\tthis._traceBuffer.shift();\n\t\t\t\t\t}\n\t\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._traceMask = function (traceObject, masked) {\n\t\t\tvar traceObjectMasked = {};\n\t\t\tfor (var attr in traceObject) {\n\t\t\t\tif (traceObject.hasOwnProperty(attr)) {\n\t\t\t\t\tif (attr == masked)\n\t\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\n\t\t\t\t\telse\n\t\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn traceObjectMasked;\n\t\t};\n\n\t\t// ------------------------------------------------------------------------\n\t\t// Public Programming interface.\n\t\t// ------------------------------------------------------------------------\n\n\t\t/**\n\t * The JavaScript application communicates to the server using a {@link Paho.Client} object.\n\t * <p>\n\t * Most applications will create just one Client object and then call its connect() method,\n\t * however applications can create more than one Client object if they wish.\n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\n\t * <p>\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods\n\t * (even though the underlying protocol exchange might be synchronous in nature).\n\t * This means they signal their completion by calling back to the application,\n\t * via Success or Failure callback functions provided by the application on the method in question.\n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime\n\t * of the script that made the invocation.\n\t * <p>\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>,\n\t * that are defined on the {@link Paho.Client} object.\n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client.\n\t *\n\t * @name Paho.Client\n\t *\n\t * @constructor\n\t *\n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n\t *\n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n\t * @property {number} port - <i>read only</i> the server's port.\n\t * @property {string} path - <i>read only</i> the server's path.\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\n\t * @property {function} onConnectionLost - called when a connection has been lost.\n\t *                            after a connect() method has succeeded.\n\t *                            Establish the call back used when a connection has been lost. The connection may be\n\t *                            lost because the client initiates a disconnect or because the server or network\n\t *                            cause the client to be disconnected. The disconnect call back may be called without\n\t *                            the connectionComplete call back being invoked if, for example the client fails to\n\t *                            connect.\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n\t *                            <ol>\n\t *                            <li>errorCode\n\t *                            <li>errorMessage\n\t *                            </ol>\n\t * @property {function} onMessageDelivered - called when a message has been delivered.\n\t *                            All processing that this Client will ever do has been completed. So, for example,\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n\t *                            and the message has been removed from persistent storage before this callback is invoked.\n\t *                            Parameters passed to the onMessageDelivered callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that was delivered.\n\t *                            </ol>\n\t * @property {function} onMessageArrived - called when a message has arrived in this Paho.client.\n\t *                            Parameters passed to the onMessageArrived callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that has arrived.\n\t *                            </ol>\n\t * @property {function} onConnected - called when a connection is successfully made to the server.\n\t *                                  after a connect() method.\n\t *                                  Parameters passed to the onConnected callback are:\n\t *                                  <ol>\n\t *                                  <li>reconnect (boolean) - If true, the connection was the result of a reconnect.</li>\n\t *                                  <li>URI (string) - The URI used to connect to the server.</li>\n\t *                                  </ol>\n\t * @property {boolean} disconnectedPublishing - if set, will enable disconnected publishing in\n\t *                                            in the event that the connection to the server is lost.\n\t * @property {number} disconnectedBufferSize - Used to set the maximum number of messages that the disconnected\n\t *                                             buffer will hold before rejecting new messages. Default size: 5000 messages\n\t * @property {function} trace - called whenever trace is called. TODO\n\t */\n\t\tvar Client = function (host, port, path, clientId) {\n\n\t\t\tvar uri;\n\n\t\t\tif (typeof host !== \"string\")\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\n\t\t\tif (arguments.length == 2) {\n\t\t\t// host: must be full ws:// uri\n\t\t\t// port: clientId\n\t\t\t\tclientId = port;\n\t\t\t\turi = host;\n\t\t\t\tvar match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\t\t\t\tif (match) {\n\t\t\t\t\thost = match[4]||match[2];\n\t\t\t\t\tport = parseInt(match[7]);\n\t\t\t\t\tpath = match[8];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (arguments.length == 3) {\n\t\t\t\t\tclientId = path;\n\t\t\t\t\tpath = \"/mqtt\";\n\t\t\t\t}\n\t\t\t\tif (typeof port !== \"number\" || port < 0)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n\t\t\t\tif (typeof path !== \"string\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n\n\t\t\t\tvar ipv6AddSBracket = (host.indexOf(\":\") !== -1 && host.slice(0,1) !== \"[\" && host.slice(-1) !== \"]\");\n\t\t\t\turi = \"ws://\"+(ipv6AddSBracket?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t}\n\n\t\t\tvar clientIdLength = 0;\n\t\t\tfor (var i = 0; i<clientId.length; i++) {\n\t\t\t\tvar charCode = clientId.charCodeAt(i);\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {\n\t\t\t\t\ti++; // Surrogate pair.\n\t\t\t\t}\n\t\t\t\tclientIdLength++;\n\t\t\t}\n\t\t\tif (typeof clientId !== \"string\" || clientIdLength > 65535)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"]));\n\n\t\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\n\n\t\t\t//Public Properties\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"host\":{\n\t\t\t\t\tget: function() { return host; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"port\":{\n\t\t\t\t\tget: function() { return port; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"path\":{\n\t\t\t\t\tget: function() { return path; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"uri\":{\n\t\t\t\t\tget: function() { return uri; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"clientId\":{\n\t\t\t\t\tget: function() { return client.clientId; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"onConnected\":{\n\t\t\t\t\tget: function() { return client.onConnected; },\n\t\t\t\t\tset: function(newOnConnected) {\n\t\t\t\t\t\tif (typeof newOnConnected === \"function\")\n\t\t\t\t\t\t\tclient.onConnected = newOnConnected;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnected, \"onConnected\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedPublishing\":{\n\t\t\t\t\tget: function() { return client.disconnectedPublishing; },\n\t\t\t\t\tset: function(newDisconnectedPublishing) {\n\t\t\t\t\t\tclient.disconnectedPublishing = newDisconnectedPublishing;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedBufferSize\":{\n\t\t\t\t\tget: function() { return client.disconnectedBufferSize; },\n\t\t\t\t\tset: function(newDisconnectedBufferSize) {\n\t\t\t\t\t\tclient.disconnectedBufferSize = newDisconnectedBufferSize;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onConnectionLost\":{\n\t\t\t\t\tget: function() { return client.onConnectionLost; },\n\t\t\t\t\tset: function(newOnConnectionLost) {\n\t\t\t\t\t\tif (typeof newOnConnectionLost === \"function\")\n\t\t\t\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageDelivered\":{\n\t\t\t\t\tget: function() { return client.onMessageDelivered; },\n\t\t\t\t\tset: function(newOnMessageDelivered) {\n\t\t\t\t\t\tif (typeof newOnMessageDelivered === \"function\")\n\t\t\t\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageArrived\":{\n\t\t\t\t\tget: function() { return client.onMessageArrived; },\n\t\t\t\t\tset: function(newOnMessageArrived) {\n\t\t\t\t\t\tif (typeof newOnMessageArrived === \"function\")\n\t\t\t\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"trace\":{\n\t\t\t\t\tget: function() { return client.traceFunction; },\n\t\t\t\t\tset: function(trace) {\n\t\t\t\t\t\tif(typeof trace === \"function\"){\n\t\t\t\t\t\t\tclient.traceFunction = trace;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t/**\n\t\t * Connect this Messaging client to its server.\n\t\t *\n\t\t * @name Paho.Client#connect\n\t\t * @function\n\t\t * @param {object} connectOptions - Attributes used with the connection.\n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this\n\t\t *                    number of seconds, it is deemed to have failed.\n\t\t *                    The default is 30 seconds.\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\n\t\t * @param {Paho.Message} connectOptions.willMessage - sent by the server when the client\n\t\t *                    disconnects abnormally.\n\t\t * @param {number} connectOptions.keepAliveInterval - the server disconnects this client if\n\t\t *                    there is no activity for this number of seconds.\n\t\t *                    The default value of 60 seconds is assumed if not set.\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server\n\t\t *                    persistent state is deleted on successful connect.\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement\n\t\t *                    has been received from the server.\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.\n\t\t * </ol>\n\t * @param {function} connectOptions.onFailure - called when the connect request has failed or timed out.\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.\n\t\t * <li>errorCode a number indicating the nature of the error.\n\t\t * <li>errorMessage text describing the error.\n\t\t * </ol>\n\t * @param {array} connectOptions.hosts - If present this contains either a set of hostnames or fully qualified\n\t\t * WebSocket URIs (ws://iot.eclipse.org:80/ws), that are tried in order in place\n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n\t\t * one of then succeeds.\n\t * @param {array} connectOptions.ports - If present the set of ports matching the hosts. If hosts contains URIs, this property\n\t\t * is not used.\n\t * @param {boolean} connectOptions.reconnect - Sets whether the client will automatically attempt to reconnect\n\t * to the server if the connection is lost.\n\t *<ul>\n\t *<li>If set to false, the client will not attempt to automatically reconnect to the server in the event that the\n\t * connection is lost.</li>\n\t *<li>If set to true, in the event that the connection is lost, the client will attempt to reconnect to the server.\n\t * It will initially wait 1 second before it attempts to reconnect, for every failed reconnect attempt, the delay\n\t * will double until it is at 2 minutes at which point the delay will stay at 2 minutes.</li>\n\t *</ul>\n\t * @param {number} connectOptions.mqttVersion - The version of MQTT to use to connect to the MQTT Broker.\n\t *<ul>\n\t *<li>3 - MQTT V3.1</li>\n\t *<li>4 - MQTT V3.1.1</li>\n\t *</ul>\n\t * @param {boolean} connectOptions.mqttVersionExplicit - If set to true, will force the connection to use the\n\t * selected MQTT Version or will fail to connect.\n\t * @param {array} connectOptions.uris - If present, should contain a list of fully qualified WebSocket uris\n\t * (e.g. ws://iot.eclipse.org:80/ws), that are tried in order in place of the host and port parameter of the construtor.\n\t * The uris are tried one at a time in order until one of them succeeds. Do not use this in conjunction with hosts as\n\t * the hosts array will be converted to uris and will overwrite this property.\n\t\t * @throws {InvalidState} If the client is not in disconnected state. The client must have received connectionLost\n\t\t * or disconnected before calling connect for a second or subsequent time.\n\t\t */\n\t\t\tthis.connect = function (connectOptions) {\n\t\t\t\tconnectOptions = connectOptions || {} ;\n\t\t\t\tvalidate(connectOptions,  {timeout:\"number\",\n\t\t\t\t\tuserName:\"string\",\n\t\t\t\t\tpassword:\"string\",\n\t\t\t\t\twillMessage:\"object\",\n\t\t\t\t\tkeepAliveInterval:\"number\",\n\t\t\t\t\tcleanSession:\"boolean\",\n\t\t\t\t\tuseSSL:\"boolean\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\thosts:\"object\",\n\t\t\t\t\tports:\"object\",\n\t\t\t\t\treconnect:\"boolean\",\n\t\t\t\t\tmqttVersion:\"number\",\n\t\t\t\t\tmqttVersionExplicit:\"boolean\",\n\t\t\t\t\turis: \"object\"});\n\n\t\t\t\t// If no keep alive interval is set, assume 60 seconds.\n\t\t\t\tif (connectOptions.keepAliveInterval === undefined)\n\t\t\t\t\tconnectOptions.keepAliveInterval = 60;\n\n\t\t\t\tif (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n\t\t\t\t}\n\n\t\t\t\tif (connectOptions.mqttVersion === undefined) {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = false;\n\t\t\t\t\tconnectOptions.mqttVersion = 4;\n\t\t\t\t} else {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = true;\n\t\t\t\t}\n\n\t\t\t\t//Check that if password is set, so is username\n\t\t\t\tif (connectOptions.password !== undefined && connectOptions.userName === undefined)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]));\n\n\t\t\t\tif (connectOptions.willMessage) {\n\t\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n\t\t\t\t\t// The will message must have a payload that can be represented as a string.\n\t\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\n\t\t\t\t\tconnectOptions.willMessage.stringPayload = null;\n\n\t\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n\t\t\t\t}\n\t\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\n\t\t\t\t\tconnectOptions.cleanSession = true;\n\t\t\t\tif (connectOptions.hosts) {\n\n\t\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\t\tif (connectOptions.hosts.length <1 )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\n\t\t\t\t\tvar usingURIs = false;\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\tusingURIs = true;\n\t\t\t\t\t\t\t} else if (!usingURIs) {\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (usingURIs) {\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!usingURIs) {\n\t\t\t\t\t\tif (!connectOptions.ports)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (connectOptions.hosts.length !== connectOptions.ports.length)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\n\t\t\t\t\t\tconnectOptions.uris = [];\n\n\t\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\n\t\t\t\t\t\t\tvar host = connectOptions.hosts[i];\n\t\t\t\t\t\t\tvar port = connectOptions.ports[i];\n\n\t\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") !== -1);\n\t\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t\t\t\t\tconnectOptions.uris.push(uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclient.connect(connectOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#subscribe\n\t\t * @function\n\t\t * @param {string} filter describing the destinations to receive messages from.\n\t\t * <br>\n\t\t * @param {object} subscribeOptions - used to control the subscription\n\t\t *\n\t\t * @param {number} subscribeOptions.qos - the maximum qos of any publications sent\n\t\t *                                  as a result of making this subscription.\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t *                                  or onFailure callback.\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n\t\t *                                  has been received from the server.\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.\n\t\t *                                  </ol>\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.\n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\n\t\t *                                  <li>errorMessage - text describing the error.\n\t\t *                                  </ol>\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n\t\t *                                  seconds after which the onFailure calback is called.\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\n\t\t *                                  callback from being called when the subscribe completes.\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.subscribe = function (filter, subscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tsubscribeOptions = subscribeOptions || {} ;\n\t\t\t\tvalidate(subscribeOptions,  {qos:\"number\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tif (typeof subscribeOptions.qos !== \"undefined\" && !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n\t\t\t\tclient.subscribe(filter, subscribeOptions);\n\t\t\t};\n\n\t\t/**\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#unsubscribe\n\t\t * @function\n\t\t * @param {string} filter - describing the destinations to receive messages from.\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t\t\t\t\t\t\t\t\t\t  or onFailure callback.\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n\t\t *                                    A single response object parameter is passed to the\n\t\t *                                    onSuccess callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    </ol>\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\n\t\t *                                    <li>errorMessage - text describing the error.\n\t\t *                                    </ol>\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n\t\t *                                    after which the onFailure callback is called. The presence of\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\n\t\t *                                    called when the unsubscribe completes\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\n\t\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Send a message to the consumers of the destination in the Message.\n\t\t *\n\t\t * @name Paho.Client#send\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be sent.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.send = function (topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Publish a message to the consumers of the destination in the Message.\n\t\t * Synonym for Paho.Mqtt.Client#send\n\t\t *\n\t\t * @name Paho.Client#publish\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the topic to which the message is to be published.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be published.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.publish = function(topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Normal disconnect of this Messaging client from its server.\n\t\t *\n\t\t * @name Paho.Client#disconnect\n\t\t * @function\n\t\t * @throws {InvalidState} if the client is already disconnected.\n\t\t */\n\t\t\tthis.disconnect = function () {\n\t\t\t\tclient.disconnect();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Get the contents of the trace log.\n\t\t *\n\t\t * @name Paho.Client#getTraceLog\n\t\t * @function\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\n\t\t */\n\t\t\tthis.getTraceLog = function () {\n\t\t\t\treturn client.getTraceLog();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Start tracing.\n\t\t *\n\t\t * @name Paho.Client#startTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.startTrace = function () {\n\t\t\t\tclient.startTrace();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Stop tracing.\n\t\t *\n\t\t * @name Paho.Client#stopTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.stopTrace = function () {\n\t\t\t\tclient.stopTrace();\n\t\t\t};\n\n\t\t\tthis.isConnected = function() {\n\t\t\t\treturn client.connected;\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * An application message, sent or received.\n\t * <p>\n\t * All attributes may be null, which implies the default values.\n\t *\n\t * @name Paho.Message\n\t * @constructor\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\n\t * <p>\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n\t * <p>\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n\t *                    (for messages received by the onMessage function).\n\t * <p>\n\t * @property {number} qos The Quality of Service used to deliver the message.\n\t * <dl>\n\t *     <dt>0 Best effort (default).\n\t *     <dt>1 At least once.\n\t *     <dt>2 Exactly once.\n\t * </dl>\n\t * <p>\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered\n\t *                     to both current and future subscriptions.\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t *                     A received message has the retained boolean set to true if the message was published\n\t *                     with the retained boolean set to true\n\t *                     and the subscrption was made after the message has been published.\n\t * <p>\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received.\n\t *                     This is only set on messages received from the server.\n\t *\n\t */\n\t\tvar Message = function (newPayload) {\n\t\t\tvar payload;\n\t\t\tif (   typeof newPayload === \"string\" ||\n\t\tnewPayload instanceof ArrayBuffer ||\n\t\t(ArrayBuffer.isView(newPayload) && !(newPayload instanceof DataView))\n\t\t\t) {\n\t\t\t\tpayload = newPayload;\n\t\t\t} else {\n\t\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\n\t\t\t}\n\n\t\t\tvar destinationName;\n\t\t\tvar qos = 0;\n\t\t\tvar retained = false;\n\t\t\tvar duplicate = false;\n\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"payloadString\":{\n\t\t\t\t\tenumerable : true,\n\t\t\t\t\tget : function () {\n\t\t\t\t\t\tif (typeof payload === \"string\")\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn parseUTF8(payload, 0, payload.length);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"payloadBytes\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\tif (typeof payload === \"string\") {\n\t\t\t\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\n\t\t\t\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\t\t\t\tstringToUTF8(payload, byteStream, 0);\n\n\t\t\t\t\t\t\treturn byteStream;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"destinationName\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newDestinationName) {\n\t\t\t\t\t\tif (typeof newDestinationName === \"string\")\n\t\t\t\t\t\t\tdestinationName = newDestinationName;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"qos\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return qos; },\n\t\t\t\t\tset: function(newQos) {\n\t\t\t\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\n\t\t\t\t\t\t\tqos = newQos;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"retained\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return retained; },\n\t\t\t\t\tset: function(newRetained) {\n\t\t\t\t\t\tif (typeof newRetained === \"boolean\")\n\t\t\t\t\t\t\tretained = newRetained;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"topic\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newTopic) {destinationName=newTopic;}\n\t\t\t\t},\n\t\t\t\t\"duplicate\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return duplicate; },\n\t\t\t\t\tset: function(newDuplicate) {duplicate=newDuplicate;}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Module contents.\n\t\treturn {\n\t\t\tClient: Client,\n\t\t\tMessage: Message\n\t\t};\n\t// eslint-disable-next-line no-nested-ternary\n\t})(typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n\treturn PahoMQTT;\n});\n","import \"./bootstrap.cyborg.min.css\";\r\nimport \"./styles.css\";\r\n\r\nimport { Client } from \"paho-mqtt\";\r\n\r\nconst host_client = \"client-\" + random_id();\r\nconst topic_base = \"event/contribution/\";\r\nconst topic_comment = topic_base + \"comment\";\r\nconst topic_note = topic_base + \"note\";\r\nconst topic_message = topic_base + \"message\";\r\nconst topic_like = topic_base + \"like\";\r\nconst topic_highlight = topic_base + \"highlight\";\r\nconst topic_stats = \"$SYS/broker/clients\";\r\n// @ts-ignore\r\nconst mqtt = new Client(mqttUrl(), host_client) as any;\r\nconst storage = { comments: {}, messages: {} };\r\nconst functions = {\r\n  deleteComment: deleteComment,\r\n  deleteMessage: deleteMessage,\r\n  highlightMessage: highlightMessage,\r\n  likeMessage: likeMessage,\r\n  sendComment: sendComment,\r\n  sendNote: sendNote,\r\n  takeComment: takeComment,\r\n};\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", connect);\r\n\r\nfunction mqttUrl(): string {\r\n  if (\r\n    window.location.protocol == \"file:\" ||\r\n    window.location.hostname.endsWith(\".vercel.app\")\r\n  ) {\r\n    return \"wss://mqtt.eclipse.org/mqtt\";\r\n  } else if (window.location.protocol == \"https:\") {\r\n    return `wss://${window.location.hostname}:${window.location.port}/mqtt`;\r\n  } else {\r\n    return `ws://${window.location.hostname}:${window.location.port}/mqtt`;\r\n  }\r\n}\r\n\r\nfunction random_id(): string {\r\n  return (\r\n    Number(String(Math.random()).slice(2)) +\r\n    Date.now() +\r\n    Math.round(performance.now())\r\n  ).toString(36);\r\n}\r\n\r\nfunction escapeHTML(txt: string): string {\r\n  const tmp = document.createElement(\"div\");\r\n  tmp.append(txt);\r\n  return tmp.innerHTML;\r\n}\r\n\r\nfunction connect(): void {\r\n  mqtt.onMessageArrived = onReceive;\r\n  mqtt.onConnectionLost = onFailure;\r\n  showToast(\"Verbinde zum Server\");\r\n  try {\r\n    mqtt.connect({\r\n      onSuccess: onConnect,\r\n      onFailure: onFailure,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n    showToast(\"FEHLER: Versuche die Seite neu zu laden.\");\r\n  }\r\n}\r\n\r\nfunction send(\r\n  topic: string,\r\n  payload: string,\r\n  retain: boolean = false\r\n): boolean {\r\n  try {\r\n    showToast();\r\n    mqtt.send(topic, payload, 1, retain);\r\n    return true;\r\n  } catch (err) {\r\n    console.log(err);\r\n    showToast(\"FEHLER: Versuche es erneut.\");\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction showToast(txt: String = undefined): void {\r\n  const elem = document.getElementById(\"toast\");\r\n  if (txt) {\r\n    addFromTemplate(\"template-toast\", \"toast-host\", { text: txt });\r\n  } else if (elem) {\r\n    elem.remove();\r\n  }\r\n}\r\n\r\nfunction onFailure(err): void {\r\n  console.log(err);\r\n  showToast(\"FEHLER: Neue Verbindung in 2 Sekunden.\");\r\n  window.setTimeout(connect, 2000);\r\n}\r\n\r\nfunction onConnect(): void {\r\n  showToast();\r\n  try {\r\n    mqtt.subscribe(topic_note, { qos: 1 });\r\n    mqtt.subscribe(topic_message + \"/+\", { qos: 1 });\r\n    mqtt.subscribe(topic_highlight, { qos: 1 });\r\n    if (document.querySelector(\"body[data-is-admin]\")) {\r\n      mqtt.subscribe(topic_comment + \"/+\", { qos: 1 });\r\n      mqtt.subscribe(topic_like + \"/+/+\", { qos: 1 });\r\n      mqtt.subscribe(topic_stats + \"/#\", { qos: 1 });\r\n    }\r\n    // bind keypress\r\n    document.querySelectorAll(\"[data-bind-keypress]\").forEach((elem) => {\r\n      try {\r\n        elem.addEventListener(\r\n          \"keypress\",\r\n          functions[(elem as HTMLElement).dataset.bindKeypress]\r\n        );\r\n      } catch (err) {\r\n        console.log(\"unable to bind function\", elem, err);\r\n      }\r\n    });\r\n    // bind click\r\n    document.querySelectorAll(\"[data-bind-click]\").forEach((elem) => {\r\n      try {\r\n        elem.addEventListener(\r\n          \"click\",\r\n          functions[(elem as HTMLElement).dataset.bindClick]\r\n        );\r\n      } catch (err) {\r\n        console.log(\"unable to bind function\", elem, err);\r\n      }\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n    showToast(\"FEHLER: Versuche die Seite neu zu laden.\");\r\n  }\r\n}\r\n\r\nfunction onReceive(msg: any): void {\r\n  try {\r\n    // stats\r\n    if (msg.destinationName.startsWith(topic_stats + \"/\")) {\r\n      receiveStats(msg.destinationName, msg.payloadString);\r\n    }\r\n    // comment\r\n    else if (msg.destinationName.startsWith(topic_comment + \"/\")) {\r\n      const subtopic = msg.destinationName.substr(topic_comment.length + 1);\r\n      receiveComment(subtopic, msg.payloadString);\r\n    }\r\n    // note\r\n    else if (msg.destinationName == topic_note) {\r\n      receiveNote(msg.payloadString);\r\n    }\r\n    // message\r\n    else if (msg.destinationName.startsWith(topic_message + \"/\")) {\r\n      const subtopic = msg.destinationName.substr(topic_message.length + 1);\r\n      receiveMessage(subtopic, msg.payloadString);\r\n    }\r\n    // like\r\n    else if (msg.destinationName.startsWith(topic_like + \"/\")) {\r\n      const subtopic = msg.destinationName.substr(topic_like.length + 1);\r\n      const paths = subtopic.split(\"/\");\r\n      receiveLike(paths[0], paths[1], msg.payloadString);\r\n    }\r\n    // highlight\r\n    else if (msg.destinationName == topic_highlight) {\r\n      receiveHighlight(msg.payloadString);\r\n    }\r\n    // unknown\r\n    else {\r\n      console.log(msg.destinationName, msg.payloadString);\r\n    }\r\n  } catch (err) {\r\n    console.log(\"failed to hande message\", err);\r\n  }\r\n}\r\n\r\nfunction addFromTemplate(\r\n  tmplId: string,\r\n  destId: string,\r\n  data: Object\r\n): HTMLElement {\r\n  const tmpl = document.getElementById(tmplId);\r\n  const dest = document.getElementById(destId);\r\n  if (tmpl !== null && dest !== null) {\r\n    let html = tmpl.innerHTML;\r\n    // replace data\r\n    for (const key in data) {\r\n      html = html.split(\"{{\" + key + \"}}\").join(data[key]);\r\n    }\r\n    const tmp = document.createElement(\"div\");\r\n    tmp.innerHTML = html;\r\n    const tmp2 = tmp.firstElementChild as HTMLElement;\r\n    // bind click\r\n    tmp2.querySelectorAll(\"[data-bind-click]\").forEach((elem) => {\r\n      try {\r\n        elem.addEventListener(\r\n          \"click\",\r\n          functions[(elem as HTMLElement).dataset.bindClick]\r\n        );\r\n      } catch (err) {\r\n        console.log(\"unable to bind function\", elem);\r\n      }\r\n    });\r\n    // replace old\r\n    const old = document.getElementById(tmp2.id);\r\n    if (tmp2.id && old !== null) {\r\n      old.parentNode.replaceChild(tmp2, old);\r\n    } else {\r\n      dest.appendChild(tmp2);\r\n    }\r\n    // sort\r\n    const children = tmp2.parentNode.querySelectorAll(\"[data-orderid]\");\r\n    if (children.length) {\r\n      Array.from(children)\r\n        .sort(\r\n          (elem1, elem2) =>\r\n            Number.parseInt((elem2 as HTMLElement).dataset.orderid) -\r\n            Number.parseInt((elem1 as HTMLElement).dataset.orderid)\r\n        )\r\n        .forEach((elem) => elem.parentNode.appendChild(elem));\r\n    }\r\n    return tmp2;\r\n  }\r\n}\r\n\r\nfunction findClosestInput(elem: HTMLElement): HTMLElement {\r\n  const tmp = elem.closest(\".input-group\");\r\n  if (tmp !== null) return tmp.querySelector('input[type=\"text\"]');\r\n}\r\n\r\nfunction removeById(id: string): void {\r\n  const elem = document.getElementById(id);\r\n  if (elem !== null) elem.remove();\r\n}\r\n\r\nfunction receiveStats(topic: string, txt: string): void {\r\n  const dest = document.getElementById(\"stats-clients\");\r\n  if (topic == topic_stats + \"/connected\")\r\n    if (dest !== null) dest.innerHTML = txt;\r\n}\r\n\r\nfunction sendComment(evt: Event | KeyboardEvent): void {\r\n  let elem = this;\r\n  if (\r\n    (evt instanceof KeyboardEvent &&\r\n      evt.type == \"keypress\" &&\r\n      evt.key == \"Enter\" &&\r\n      elem.value) ||\r\n    (evt.type == \"click\" &&\r\n      (elem = findClosestInput(this)) !== null &&\r\n      elem.value)\r\n  ) {\r\n    if (send(topic_comment + \"/\" + random_id(), elem.value, true)) {\r\n      elem.value = \"\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction receiveComment(id: string, txt: string): void {\r\n  if (txt) {\r\n    storage.comments[id] = { text: txt };\r\n    const data = {\r\n      id: id,\r\n      text: escapeHTML(txt),\r\n      date: new Date().toLocaleString(),\r\n    };\r\n    addFromTemplate(\"template-comment\", \"comment-stream\", data);\r\n  } else {\r\n    delete storage.comments[id];\r\n    removeById(\"comment-\" + id);\r\n  }\r\n}\r\n\r\nfunction takeComment(evt: Event): void {\r\n  if (confirm(\"Diesen Kommentar wirklich übernehmen?\")) {\r\n    const id = this.dataset.id;\r\n    send(topic_comment + \"/\" + id, \"\", true);\r\n    sendMessage(id, storage.comments[id].text);\r\n  }\r\n}\r\n\r\nfunction deleteComment(evt: Event): void {\r\n  if (confirm(\"Diesen Kommentar wirklich löschen?\")) {\r\n    const id = this.dataset.id;\r\n    send(topic_comment + \"/\" + id, \"\", true);\r\n  }\r\n}\r\n\r\nfunction sendNote(evt: Event | KeyboardEvent): void {\r\n  let elem = this;\r\n  if (\r\n    (evt instanceof KeyboardEvent &&\r\n      evt.type == \"keypress\" &&\r\n      evt.key == \"Enter\") ||\r\n    (evt.type == \"click\" && (elem = findClosestInput(this)) !== null)\r\n  ) {\r\n    if (send(topic_note, elem.value, true)) {\r\n      elem.value = \"\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction receiveNote(txt: string): void {\r\n  if (txt) {\r\n    const data = { text: escapeHTML(txt) };\r\n    addFromTemplate(\"template-note\", \"note-stream\", data);\r\n  } else {\r\n    removeById(\"note-top\");\r\n  }\r\n}\r\n\r\nfunction sendMessage(id: string, txt: string, likes: number = 0): boolean {\r\n  const data = JSON.stringify({ text: txt, likes: likes });\r\n  return send(topic_message + \"/\" + id, data, true);\r\n}\r\n\r\nfunction receiveMessage(id: string, input: string): void {\r\n  if (input) {\r\n    const json = JSON.parse(input);\r\n    storage.messages[id] = {\r\n      text: json.text,\r\n      likes: json.likes,\r\n    };\r\n    const data = {\r\n      id: id,\r\n      text: escapeHTML(json.text),\r\n      likes: escapeHTML(json.likes),\r\n    };\r\n    addFromTemplate(\"template-message\", \"message-stream\", data);\r\n  } else {\r\n    delete storage.messages[id];\r\n    removeById(\"message-\" + id);\r\n  }\r\n}\r\n\r\nfunction highlightMessage(evt: Event): boolean {\r\n  const id = this.dataset.id;\r\n  if (id && storage.messages[id]) {\r\n    const data = JSON.stringify(storage.messages[id]);\r\n    return send(topic_highlight, data);\r\n  }\r\n}\r\n\r\nfunction likeMessage(evt: Event): void {\r\n  const id = this.dataset.id;\r\n  if (id) {\r\n    // cookie\r\n    let liked = [];\r\n    try {\r\n      const value = \"; \" + document.cookie;\r\n      const parts = value.split(\"; liked=\");\r\n      if (parts.length == 2) {\r\n        liked = JSON.parse(parts.pop().split(\";\").shift());\r\n      }\r\n    } catch (err) {}\r\n    // like if unliked\r\n    if (liked.indexOf(id) == -1) {\r\n      liked.push(id);\r\n      document.cookie = \"liked=\" + JSON.stringify(liked);\r\n      document.cookie = \"max-age=\" + 6 * 60 * 60;\r\n      if (send(topic_like + \"/\" + id + \"/\" + host_client, \"like\", true)) {\r\n        const data = { id: id };\r\n        addFromTemplate(\"template-likes-loading\", \"likes-\" + id, data);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction deleteMessage(evt: Event): void {\r\n  if (confirm(\"Diese Nachricht wirklich löschen?\")) {\r\n    if (this.dataset.id) {\r\n      send(topic_message + \"/\" + this.dataset.id, \"\", true);\r\n    }\r\n  }\r\n}\r\n\r\nfunction receiveLike(id: string, client: string, txt: string): void {\r\n  if (txt && storage.messages[id]) {\r\n    sendMessage(id, storage.messages[id].text, storage.messages[id].likes + 1);\r\n    send(topic_like + \"/\" + id + \"/\" + client, \"\", true);\r\n  }\r\n}\r\n\r\nfunction receiveHighlight(txt: string): void {\r\n  const data = JSON.parse(txt);\r\n  if (data) {\r\n    addFromTemplate(\"template-highlight\", \"highlight-stream\", data);\r\n  }\r\n}\r\n"],"names":["factory","PahoMQTT","global","version","data","localStorage","setItem","key","item","getItem","removeItem","MESSAGE_TYPE","validate","obj","keys","hasOwnProperty","errorStr","validKey","Error","_typeof","format","ERROR","INVALID_TYPE","scope","f","apply","arguments","OK","code","text","CONNECT_TIMEOUT","SUBSCRIBE_TIMEOUT","UNSUBSCRIBE_TIMEOUT","PING_TIMEOUT","INTERNAL_ERROR","CONNACK_RETURNCODE","SOCKET_ERROR","SOCKET_CLOSE","MALFORMED_UTF","UNSUPPORTED","INVALID_STATE","INVALID_ARGUMENT","UNSUPPORTED_OPERATION","INVALID_STORED_DATA","INVALID_MQTT_MESSAGE_TYPE","MALFORMED_UNICODE","BUFFER_FULL","CONNACK_RC","error","substitutions","field","start","i","length","indexOf","part1","substring","part2","MqttProtoIdentifierv3","MqttProtoIdentifierv4","WireMessage","type","options","name","this","decodeMessage","input","pos","startingPos","digit","first","messageInfo","remLength","multiplier","endPos","wireMessage","sessionPresent","returnCode","qos","len","readUint16","topicName","parseUTF8","messageIdentifier","message","Message","subarray","retained","duplicate","destinationName","payloadMessage","writeUint16","buffer","offset","writeString","utf8Length","stringToUTF8","UTF8Length","output","charCode","charCodeAt","lowCharCode","isNaN","utf16","byte1","byte2","toString","byte3","byte4","String","fromCharCode","prototype","encode","willMessagePayloadBytes","topicStrLength","destinationNameLength","undefined","mqttVersion","clientId","willMessage","payloadBytes","Uint8Array","byteLength","userName","password","topics","requestedQos","ArrayBuffer","mbi","encodeMBI","number","Array","numBytes","byteStream","set","connectFlags","cleanSession","keepAliveInterval","Pinger","client","_client","_keepAliveInterval","isReset","pingReq","doTimeout","pinger","doPing","_trace","socket","send","timeout","setTimeout","_disconnected","reset","clearTimeout","cancel","Timeout","timeoutSeconds","action","args","ClientImpl","uri","host","port","path","WebSocket","_wsuri","_localKey","_msg_queue","_buffered_msg_queue","_sentMessages","_receivedMessages","_notify_msg_sent","_message_identifier","_sequence","restore","connected","maxMessageIdentifier","connectOptions","hostIndex","onConnected","onConnectionLost","onMessageDelivered","onMessageArrived","traceFunction","_connectTimeout","sendPinger","receivePinger","_reconnectInterval","_reconnecting","_reconnectTimeout","disconnectedPublishing","disconnectedBufferSize","receiveBuffer","_traceBuffer","_MAX_TRACE_ENTRIES","connect","connectOptionsMasked","_traceMask","uris","_doConnect","subscribe","filter","subscribeOptions","constructor","onSuccess","grantedQos","invocationContext","onFailure","errorCode","errorMessage","timeOut","_requires_ack","_schedule_message","unsubscribe","unsubscribeOptions","callback","Object","sequence","unshift","disconnect","getTraceLog","Date","startTrace","stopTrace","wsurl","useSSL","uriParts","split","join","binaryType","onopen","_on_socket_open","onmessage","_on_socket_message","onerror","_on_socket_error","onclose","_on_socket_close","_process_queue","store","prefix","storedMessage","pubRecReceived","hex","messageBytes","payloadHex","JSON","stringify","value","parse","x","parseInt","pop","_socket_send","messageCount","event","messages","_deframeMessages","_handleMessage","byteArray","newData","result","push","errorStack","stack","sentMessage","receivedMessage","sequencedMessages","msgId","msg","sort","a","b","pubRelMessage","reconnected","_connected","_receivePublish","_receiveMessage","pubCompMessage","wireMessageMasked","pubAckMessage","pubRecMessage","reconnect","_reconnect","errorText","readyState","close","mqttVersionExplicit","slice","call","splice","record","severity","max","shift","traceObject","masked","traceObjectMasked","attr","newPayload","payload","isView","DataView","defineProperties","payloadString","enumerable","get","newDestinationName","newQos","newRetained","topic","newTopic","newDuplicate","Client","match","ipv6AddSBracket","clientIdLength","newOnConnected","newDisconnectedPublishing","newDisconnectedBufferSize","newOnConnectionLost","newOnMessageDelivered","newOnMessageArrived","trace","hosts","ports","stringPayload","usingURIs","test","ipv6","publish","isConnected","self","window","exports","host_client","random_id","topic_base","topic_comment","topic_note","topic_message","topic_like","topic_stats","mqtt","location","protocol","hostname","endsWith","concat","storage","comments","functions","deleteComment","evt","confirm","id","dataset","deleteMessage","highlightMessage","likeMessage","liked","parts","document","cookie","err","addFromTemplate","sendComment","elem","KeyboardEvent","findClosestInput","sendNote","takeComment","sendMessage","Number","Math","random","now","round","performance","escapeHTML","txt","tmp","createElement","append","innerHTML","onReceive","showToast","onConnect","console","log","retain","getElementById","remove","querySelector","querySelectorAll","forEach","addEventListener","bindKeypress","bindClick","startsWith","dest","date","toLocaleString","removeById","receiveComment","substr","receiveNote","json","likes","receiveMessage","paths","receiveLike","receiveHighlight","tmplId","destId","tmpl","html","tmp2","firstElementChild","old","parentNode","replaceChild","appendChild","children","from","elem1","elem2","orderid","closest"],"mappings":"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"}